# import * from "./generated/prisma.graphql"

type Query {
  me: User!

  #given a group's ID postsForGroup will return an array of tweets in the proper order
  postsForGroup(group: ID!): [Post]
  commentsForPost(post: ID!): [Comment]

  adminsForGroup(group: ID!): [User]
  nonAdminsForGroup(group: ID!): [User]
  allMembersForGroup(group: ID!): [User]

  #query takes in a username and a group's ID
  #returns true or false depending on whether or not the user should be allowed to post
  #also can be considered as isAdmin function
  userCanPost(username: String!, group: ID!): Boolean!
}

type Mutation {
  signup(
    email: String
    username: String!
    password: String!
    name: String!
  ): AuthPayload!

  login(username: String!, password: String!): AuthPayload!

  #username should be the locally stored username for the current user
  createGroup(
    username: String!
    name: String!
    members: [String!]!
    admins: [String!]!
  ): Group!

  #text is the inner of the post and feed is the unique id of the parent feed
  createPost(text: String!, group: ID!): Post!

  #text is the inner of the comment and post is the unique id of the parent post
  createComment(text: String!, post: ID!): Comment!

  #takes in a username and group ID and adds a new member to the group
  addMember(username: String!, group: ID!): Group!

  #takes in a username and group ID and adds a new admin to the group
  addNewAdmin(username: String!, group: ID!): Group!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  name: String!
  email: String
  username: String
  password: String!
  groups: [Group!]!
  adminOf: [Group!]!
  memberOf: [Group!]!
}

type Group {
  id: ID!
  name: String!
  admins: [User!]!
  members: [User!]!
  feed: [Post!]!
  # events: [Event!]!
}

type Post {
  id: ID!
  author: User!
  text: String!
  group: Group!
  comments: [Comment!]
}

type Comment {
  id: ID!
  author: User!
  text: String!
  post: Post!
}
